// Code generated by Slice Machine. DO NOT EDIT.

import type * as prismicT from "@prismicio/types";
import type * as prismic from "@prismicio/client";

type Simplify<T> = {
    [KeyType in keyof T]: T[KeyType];
};
/** Content for header documents */
interface HeaderDocumentData {
    /**
     * Logo Sibo field in *header*
     *
     * - **Field Type**: Image
     * - **Placeholder**: *None*
     * - **API ID Path**: header.logo_sibo
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/image
     *
     */
    logo_sibo: prismicT.ImageField<never>;
    /**
     * title field in *header*
     *
     * - **Field Type**: Rich Text
     * - **Placeholder**: *None*
     * - **API ID Path**: header.title
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
     *
     */
    title: prismicT.RichTextField;
    /**
     * Slice Zone field in *header*
     *
     * - **Field Type**: Slice Zone
     * - **Placeholder**: *None*
     * - **API ID Path**: header.slices[]
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/slices
     *
     */
    slices: prismicT.SliceZone<HeaderDocumentDataSlicesSlice>;
}
/**
 * Slice for *header → Slice Zone*
 *
 */
type HeaderDocumentDataSlicesSlice = SolutionSlice;
/**
 * header document from Prismic
 *
 * - **API ID**: `header`
 * - **Repeatable**: `false`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type HeaderDocument<Lang extends string = string> = prismicT.PrismicDocumentWithoutUID<Simplify<HeaderDocumentData>, "header", Lang>;
/** Content for Solution content documents */
interface SolutionContentDocumentData {
    /**
     * nom field in *Solution content*
     *
     * - **Field Type**: Rich Text
     * - **Placeholder**: *None*
     * - **API ID Path**: solution_content.nom
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
     *
     */
    nom: prismicT.RichTextField;
    /**
     * Slice Zone field in *Solution content*
     *
     * - **Field Type**: Slice Zone
     * - **Placeholder**: *None*
     * - **API ID Path**: solution_content.slices[]
     * - **Tab**: Main
     * - **Documentation**: https://prismic.io/docs/core-concepts/slices
     *
     */
    slices: prismicT.SliceZone<SolutionContentDocumentDataSlicesSlice>;
}
/**
 * Slice for *Solution content → Slice Zone*
 *
 */
type SolutionContentDocumentDataSlicesSlice = SolutionSlice;
/**
 * Solution content document from Prismic
 *
 * - **API ID**: `solution_content`
 * - **Repeatable**: `false`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type SolutionContentDocument<Lang extends string = string> = prismicT.PrismicDocumentWithUID<Simplify<SolutionContentDocumentData>, "solution_content", Lang>;
export type AllDocumentTypes = HeaderDocument | SolutionContentDocument;
/**
 * Primary content in Solution → Primary
 *
 */
interface SolutionSliceDefaultPrimary {
    /**
     * Title field in *Solution → Primary*
     *
     * - **Field Type**: Title
     * - **Placeholder**: This is where it all begins...
     * - **API ID Path**: solution.primary.title
     * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
     *
     */
    title: prismicT.TitleField;
    /**
     * Description field in *Solution → Primary*
     *
     * - **Field Type**: Rich Text
     * - **Placeholder**: A nice description of your product
     * - **API ID Path**: solution.primary.description
     * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
     *
     */
    description: prismicT.RichTextField;
    /**
     * Subtitle field in *Solution → Primary*
     *
     * - **Field Type**: Text
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.primary.subtitle
     * - **Documentation**: https://prismic.io/docs/core-concepts/key-text
     *
     */
    subtitle: prismicT.KeyTextField;
}
/**
 * Item in Solution → Items
 *
 */
export interface SolutionSliceDefaultItem {
    /**
     * Features field in *Solution → Items*
     *
     * - **Field Type**: Image
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.items[].features
     * - **Documentation**: https://prismic.io/docs/core-concepts/image
     *
     */
    features: prismicT.ImageField<never>;
    /**
     * Icon field in *Solution → Items*
     *
     * - **Field Type**: Image
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.items[].icon
     * - **Documentation**: https://prismic.io/docs/core-concepts/image
     *
     */
    icon: prismicT.ImageField<never>;
    /**
     * Titles field in *Solution → Items*
     *
     * - **Field Type**: Text
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.items[].titles
     * - **Documentation**: https://prismic.io/docs/core-concepts/key-text
     *
     */
    titles: prismicT.KeyTextField;
    /**
     * Descriptions field in *Solution → Items*
     *
     * - **Field Type**: Rich Text
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.items[].descriptions
     * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
     *
     */
    descriptions: prismicT.RichTextField;
    /**
     * Button field in *Solution → Items*
     *
     * - **Field Type**: Text
     * - **Placeholder**: *None*
     * - **API ID Path**: solution.items[].button
     * - **Documentation**: https://prismic.io/docs/core-concepts/key-text
     *
     */
    button: prismicT.KeyTextField;
}
/**
 * Default variation for Solution Slice
 *
 * - **API ID**: `default`
 * - **Description**: `Solution`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type SolutionSliceDefault = prismicT.SharedSliceVariation<"default", Simplify<SolutionSliceDefaultPrimary>, Simplify<SolutionSliceDefaultItem>>;
/**
 * Slice variation for *Solution*
 *
 */
type SolutionSliceVariation = SolutionSliceDefault;
/**
 * Solution Shared Slice
 *
 * - **API ID**: `solution`
 * - **Description**: `Solution`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type SolutionSlice = prismicT.SharedSlice<"solution", SolutionSliceVariation>;
declare module "@prismicio/client" {
    interface CreateClient {
        (repositoryNameOrEndpoint: string, options?: prismic.ClientConfig): prismic.Client<AllDocumentTypes>;
    }
    namespace Content {
        export type { HeaderDocumentData, HeaderDocumentDataSlicesSlice, HeaderDocument, SolutionContentDocumentData, SolutionContentDocumentDataSlicesSlice, SolutionContentDocument, AllDocumentTypes, SolutionSliceDefaultPrimary, SolutionSliceDefaultItem, SolutionSliceDefault, SolutionSliceVariation, SolutionSlice };
    }
}
